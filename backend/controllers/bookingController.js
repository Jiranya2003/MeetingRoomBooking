const Booking = require('../models/Booking'); 
const userModel = require('../models/User'); 
const roomModel = require('../models/Room'); 
const { sendBookingConfirmationEmail } = require('../services/emailService'); 
const cron = require('node-cron');

// üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
const MAX_BOOKING_DURATION_MS = 3 * 60 * 60 * 1000; 

// -----------------------------------------------------------------
// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Booking ‡πÉ‡∏´‡∏°‡πà
// -----------------------------------------------------------------
const createBooking = async (req, res) => {
    try {
        // üìå ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ req.user.id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 500 ‡∏ñ‡πâ‡∏≤ Middleware ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
        if (!req.user || !req.user.id) {
            return res.status(401).json({ message: 'Authentication failed: User ID not available.' });
        }
        
        const user_id = req.user.id;
        const { room_id, start_time, end_time, status, title } = req.body; 
        
        if (!room_id || !start_time || !end_time) 
            return res.status(400).json({ message: 'Missing required booking fields.' });

        // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ---
        const startTimeMs = new Date(start_time).getTime();
        const endTimeMs = new Date(end_time).getTime();
        const durationMs = endTimeMs - startTimeMs;

        if (durationMs <= 0) 
            return res.status(400).json({ message: 'End time must be after start time.' });

        if (durationMs > MAX_BOOKING_DURATION_MS)
            return res.status(400).json({ message: 'Booking duration exceeds the 3-hour limit.' });

        // --- ‡∏™‡∏£‡πâ‡∏≤‡∏á booking (Model ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô) ---
        const initialStatus = status?.toUpperCase() || Booking.determineInitialStatus(start_time, end_time);

        const newBookingId = await Booking.createBooking({ 
            user_id, 
            room_id, 
            start_time, 
            end_time, 
            status: initialStatus,
            title
        });

        // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö email ---
        const user = await userModel.findById(user_id);
        const room = await roomModel.getRoomById(room_id);
        
        const bookingDetails = {
            id: newBookingId,
            user_name: user?.name || user?.email || 'N/A',
            room_name: room?.name || 'Unknown Room',
            start_time,
            end_time,
            status: initialStatus,
            title: title || ''
        };

        if (user && user.email) {
            await sendBookingConfirmationEmail(user.email, bookingDetails);
        }

        // üìå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 201
        res.status(201).json({ 
            message: `Booking created successfully (${initialStatus}). Confirmation email sent.`,
            bookingId: newBookingId,
            data: bookingDetails // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ Frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
        });

    } catch (err) {
        console.error('Error creating booking:', err.message);
        
        // üìå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error 409 (Conflict) ‡∏ó‡∏µ‡πà‡πÇ‡∏¢‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å Model
        if (err.statusCode === 409) {
            return res.status(409).json({ message: err.message });
        }
        
        // Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏ä‡πà‡∏ô DB Error, Email Service Error)
        res.status(500).json({ message: 'Server error occurred during booking. Please check server logs.' });
    }
};

// -----------------------------------------------------------------
// 2. ‡∏î‡∏∂‡∏á booking ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// -----------------------------------------------------------------
const getMyBookings = async (req, res) => {
    try {
        const rows = await Booking.getBookingsByUser(req.user.id);
        res.json(rows);
    } catch (err) {
        console.error('Error fetching my bookings:', err);
        res.status(500).json({ message: 'Server error' });
    }
};

// -----------------------------------------------------------------
// 3. ‡∏î‡∏∂‡∏á booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
// -----------------------------------------------------------------
const getAllBookings = async (req, res) => {
    try {
        const rows = await Booking.getAllBookings();
        res.json(rows);
    } catch (err) {
        console.error('Error fetching all bookings:', err);
        res.status(500).json({ message: 'Server error' });
    }
};

// -----------------------------------------------------------------
// 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ booking (Admin)
// -----------------------------------------------------------------
const updateStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const { status } = req.body;
        
        if (!status) return res.status(400).json({ message: 'Status field is required.' });

        const booking = await Booking.getBookingById(id);
        if (!booking) return res.status(404).json({ message: 'Booking not found' });

        // üìå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Admin ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å PENDING/CONFIRMED)
        const autoStatuses = ['IN_USE','COMPLETED']; 
        if (autoStatuses.includes(booking.status)) {
            return res.status(400).json({ message: `Cannot manually change status from ${booking.status}.` });
        }
        
        // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ Admin ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ PENDING/BOOKED/CONFIRMED/REJECTED/CANCELLED ‡πÑ‡∏î‡πâ

        await Booking.updateBookingStatus(id, status);
        res.json({ message: 'Booking status updated successfully' });
    } catch (err) {
        console.error('Error updating status:', err);
        res.status(500).json({ message: 'Server error' });
    }
};

// -----------------------------------------------------------------
// 5. ‡∏•‡∏ö booking (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)
// -----------------------------------------------------------------
const deleteBooking = async (req, res) => {
    try {
        const booking = await Booking.getBookingById(req.params.id);
        if (!booking) return res.status(404).json({ message: 'Booking not found' });
        
        // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä Admin
        // if (booking.user_id !== req.user.id && !req.user.isAdmin) {
        //     return res.status(403).json({ message: 'Forbidden: You do not own this booking.' });
        // }

        if (!Booking.canCancelBooking(booking)) {
            return res.status(400).json({ message: 'Cannot cancel this booking. Less than 15 minutes to start or already in use/completed.' });
        }

        await Booking.deleteBooking(req.params.id);
        res.json({ message: 'Booking cancelled successfully' });
    } catch (err) {
        console.error('Error deleting booking:', err);
        res.status(500).json({ message: 'Server error' });
    }
};

// -----------------------------------------------------------------
// 6. ‡∏î‡∏∂‡∏á booking ‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
// -----------------------------------------------------------------
const getExistingBookingsByRoomAndDate = async (req, res) => {
    try {
        const { room_id, date } = req.query; 
        if (!room_id || !date) {
            return res.status(400).json({ message: 'Missing room_id or date query parameter.' });
        }

        const rows = await Booking.getExistingBookingsByRoomAndDate(room_id, date);
        res.json(rows);
    } catch (err) {
        console.error('Error fetching existing bookings:', err);
        res.status(500).json({ message: 'Server error' });
    }
};

// -----------------------------------------------------------------
// 7. Scheduler: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ booking ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
// -----------------------------------------------------------------
// üìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
cron.schedule('*/5 * * * *', async () => {
    try {
        console.log('‚è∞ Running scheduled booking status update:', new Date());
        await Booking.updateBookingStatusAuto();
        console.log('‚úÖ Booking statuses updated successfully');
    } catch (err) {
        console.error('‚ùå Error updating booking statuses:', err);
    }
});

module.exports = { 
    createBooking, 
    getMyBookings, 
    getAllBookings, 
    updateStatus, 
    deleteBooking,
    getExistingBookingsByRoomAndDate 
};