const MeetingRoom = require('../models/MeetingRoom');

/**
 * Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Logic ‡∏Ç‡∏≠‡∏á MeetingRoom APIs
 */

// [GET] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllMeetingRooms = async (req, res) => {
    try {
        // üö® Assumes MeetingRoom.getAllMeetingRooms() uses the corrected table name 'rooms'
        const rooms = await MeetingRoom.getAllMeetingRooms();
        res.status(200).json(rooms);
    } catch (error) {
        // üö® ‡πÉ‡∏´‡πâ log error ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å DB
        console.error('Error fetching all meeting rooms:', error.message);
        res.status(500).json({ message: 'Internal Server Error: Failed to retrieve rooms.' });
    }
};

// [GET] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ï‡∏≤‡∏° ID
exports.getMeetingRoomById = async (req, res) => {
    try {
        const id = req.params.id;
        const room = await MeetingRoom.getMeetingRoomById(id);
        
        if (!room) {
            return res.status(404).json({ message: `Meeting Room with ID ${id} not found.` });
        }

        res.status(200).json(room);
    } catch (error) {
        console.error(`Error fetching meeting room ${req.params.id}:`, error.message);
        res.status(500).json({ message: 'Internal Server Error: Failed to retrieve room details.' });
    }
};

// [POST] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà (Admin Only)
exports.createMeetingRoom = async (req, res) => {
    const { name, floor, capacity, hasProjector, isAvailable } = req.body;
    
    // üí° ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Frontend ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô String)
    const parsedCapacity = parseInt(capacity, 10);
    if (!name || isNaN(parsedCapacity) || parsedCapacity <= 0) {
        return res.status(400).json({ message: 'Name and capacity (must be a positive number) are required.' });
    }
    
    try {
        // üí° ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Default values ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        const newRoomId = await MeetingRoom.createMeetingRoom({ 
            name, 
            floor: floor || null, // ‡∏™‡πà‡∏á null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏
            capacity: parsedCapacity, 
            hasProjector: !!hasProjector, // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô boolean
            isAvailable: isAvailable !== undefined ? !!isAvailable : true 
        });

        res.status(201).json({ 
            message: 'Meeting Room created successfully.', 
            id: newRoomId 
        });
    } catch (error) {
        console.error('Error creating meeting room:', error.message);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Duplicate entry (ER_DUP_ENTRY)
        if (error.code === 'ER_DUP_ENTRY') {
            return res.status(409).json({ message: 'Meeting Room name or unique identifier already exists.' });
        }
        // üö® ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å DB/Model
        res.status(500).json({ message: 'Internal Server Error: Could not create room.' });
    }
};

// [PUT/PATCH] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (Admin Only)
exports.updateMeetingRoom = async (req, res) => {
    const id = req.params.id;
    const updates = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (Object.keys(updates).length === 0) {
        return res.status(400).json({ message: 'No fields provided for update.' });
    }
    
    // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á capacity ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (updates.capacity !== undefined) {
        const parsedCapacity = parseInt(updates.capacity, 10);
        if (isNaN(parsedCapacity) || parsedCapacity <= 0) {
            return res.status(400).json({ message: 'Capacity must be a positive number.' });
        }
        updates.capacity = parsedCapacity;
    }

    try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const result = await MeetingRoom.updateMeetingRoom(id, updates);
        
        // üí° ‡∏ñ‡πâ‡∏≤ Model ‡∏™‡πà‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏°‡∏≤ ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 404 ‡πÑ‡∏î‡πâ
        // (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Model ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)

        const updatedRoom = await MeetingRoom.getMeetingRoomById(id);
        if (!updatedRoom) {
             return res.status(404).json({ message: `Meeting Room with ID ${id} not found.` });
        }
        
        res.status(200).json({ 
            message: 'Meeting Room updated successfully.',
            room: updatedRoom 
        });
        
    } catch (error) {
        console.error(`Error updating meeting room ${id}:`, error.message);
        res.status(500).json({ message: 'Internal Server Error: Could not update room.' });
    }
};

// [DELETE] ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (Admin Only)
exports.deleteMeetingRoom = async (req, res) => {
    try {
        const id = req.params.id;
        
        // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        const result = await MeetingRoom.deleteMeetingRoom(id);
        
        // üí° ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Model ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        res.status(200).json({ message: 'Meeting Room deleted successfully.' });
    } catch (error) {
        console.error(`Error deleting meeting room ${req.params.id}:`, error.message);
        res.status(500).json({ message: 'Internal Server Error: Could not delete room.' });
    }
};