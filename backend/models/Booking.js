// backend/models/bookings.js
const db = require('../config/db');

// -----------------------------------------------------------------
// ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
// -----------------------------------------------------------------
// ‚≠ê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÄ‡∏û‡∏¥‡πà‡∏° 'PENDING' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
const ACTIVE_STATUSES = ['BOOKED', 'IN_USE', 'PENDING'];

// -----------------------------------------------------------------
// 0. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå)
// -----------------------------------------------------------------
function determineInitialStatus(start_time, end_time) {
    const now = new Date();
    const start = new Date(start_time);
    const end = new Date(end_time);

    if (end < now) return 'COMPLETED'; // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    if (start <= now && now <= end) return 'IN_USE'; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    return 'BOOKED'; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
}

// -----------------------------------------------------------------
// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (Overlap)
// -----------------------------------------------------------------
async function hasOverlap(room_id, start_time, end_time) {
    // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ô‡∏≥‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç DATE(start_time) = DATE(?) ‡∏≠‡∏≠‡∏Å
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (Existing Start < New End) AND (Existing End > New Start) ‡∏Å‡πá‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    const [rows] = await db.query(
        `SELECT id FROM bookings 
         WHERE room_id = ? 
         AND status IN (?) 
         AND (start_time < ? AND end_time > ?) 
         LIMIT 1`,
        [room_id, ACTIVE_STATUSES, end_time, start_time]
    );
    return rows.length > 0;
}

// -----------------------------------------------------------------
// 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
// -----------------------------------------------------------------
async function createBooking({ user_id, room_id, start_time, end_time, status, title = '' }) {
    const initialStatus = status || determineInitialStatus(start_time, end_time);

    const [res] = await db.query(
        `INSERT INTO bookings (user_id, room_id, start_time, end_time, status, title, updated_at)
         VALUES (?, ?, ?, ?, ?, ?, NOW())`,
        [user_id, room_id, start_time, end_time, initialStatus, title]
    );
    return res.insertId;
}

// -----------------------------------------------------------------
// 3. ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á)
// -----------------------------------------------------------------
async function getBookingsByUser(user_id) {
    const [rows] = await db.query(
        `SELECT b.*, r.name AS room_name 
         FROM bookings b 
         JOIN rooms r ON b.room_id = r.id 
         WHERE b.user_id = ? 
         ORDER BY start_time DESC`,
        [user_id]
    );
    
    // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
    const bookingsWithCurrentStatus = rows.map(booking => {
        // ‡πÉ‡∏ä‡πâ determineInitialStatus ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
        const currentStatus = determineInitialStatus(booking.start_time, booking.end_time);
        
        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà status ‡∏î‡πâ‡∏ß‡∏¢ currentStatus
        return {
            ...booking,
            status: currentStatus // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà Front-End ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ
        };
    });
    
    return bookingsWithCurrentStatus;
}

// -----------------------------------------------------------------
// 4. ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin) - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
// -----------------------------------------------------------------
async function getAllBookings() {
    const [rows] = await db.query(
        `SELECT b.*, 
                 r.name AS room_name, 
                 u.name AS user_name 
          FROM bookings b 
          JOIN rooms r ON b.room_id = r.id 
          JOIN users u ON b.user_id = u.id 
          ORDER BY start_time DESC`
    );

    // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
    const bookingsWithCurrentStatus = rows.map(booking => {
        const currentStatus = determineInitialStatus(booking.start_time, booking.end_time);
        
        return {
            ...booking,
            status: currentStatus
        };
    });

    return bookingsWithCurrentStatus;
}

// -----------------------------------------------------------------
// 5. ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
// -----------------------------------------------------------------
async function getExistingBookingsByRoomAndDate(room_id, date) {
    const startOfDay = `${date} 00:00:00`;
    const endOfDay = `${date} 23:59:59`;

    const [rows] = await db.query(
        `SELECT id, start_time, end_time, status, user_id, room_id, title
         FROM bookings
         WHERE room_id = ?
         AND start_time BETWEEN ? AND ?
         ORDER BY start_time ASC`,
        [room_id, startOfDay, endOfDay]
    );
    return rows;
}

// -----------------------------------------------------------------
// 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// -----------------------------------------------------------------
async function updateBookingStatus(id, status) {
    const [res] = await db.query(
        'UPDATE bookings SET status = ?, updated_at = NOW() WHERE id = ?',
        [status, id]
    );
    return res.affectedRows;
}

// -----------------------------------------------------------------
// 7. ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// -----------------------------------------------------------------
async function deleteBooking(id) {
    await db.query('DELETE FROM bookings WHERE id = ?', [id]);
}

// -----------------------------------------------------------------
// 8. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏° ID
// -----------------------------------------------------------------
async function getBookingById(id) {
    const [rows] = await db.query(
        'SELECT * FROM bookings WHERE id = ?',
        [id]
    );
    return rows[0];
}

// -----------------------------------------------------------------
// 9. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
// -----------------------------------------------------------------
function canCancelBooking(booking) {
    const now = new Date();
    const start = new Date(booking.start_time);
    const diffMs = start - now;
    const MIN_CANCEL_BEFORE_MS = 15 * 60 * 1000; // 15 ‡∏ô‡∏≤‡∏ó‡∏µ

    if (booking.status === 'COMPLETED' || booking.status === 'IN_USE') return false;
    return diffMs > MIN_CANCEL_BEFORE_MS;
}

// -----------------------------------------------------------------
// 10. Scheduler: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// -----------------------------------------------------------------
async function updateBookingStatusAuto() {
    const [bookings] = await db.query(
        `SELECT id, start_time, end_time, status FROM bookings`
    );

    const now = new Date();

    for (const booking of bookings) {
        const start = new Date(booking.start_time);
        const end = new Date(booking.end_time);
        let newStatus = null;

        if (end < now) newStatus = 'COMPLETED';
        else if (start <= now && now <= end) newStatus = 'IN_USE';
        else if (start > now) newStatus = 'BOOKED';

        if (newStatus && newStatus !== booking.status) {
            await db.query(
                'UPDATE bookings SET status = ?, updated_at = NOW() WHERE id = ?',
                [newStatus, booking.id]
            );
        }
    }
}

// -----------------------------------------------------------------
// 11. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô/‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î)
// -----------------------------------------------------------------
async function updateBookingDetails(id, { start_time, end_time, title }) {
    // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
    const newStatus = determineInitialStatus(start_time, end_time);

    // 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Query ‡πÅ‡∏•‡∏∞ Parameters
    const fields = [];
    const params = [];

    if (start_time) {
        fields.push('start_time = ?');
        params.push(start_time);
    }
    if (end_time) {
        fields.push('end_time = ?');
        params.push(end_time);
    }
    if (title !== undefined) {
        fields.push('title = ?');
        params.push(title);
    }
    
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
    fields.push('status = ?');
    params.push(newStatus);
    
    // Updated at
    fields.push('updated_at = NOW()');

    if (fields.length === 0) return 0; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï

    // 3. ‡∏£‡∏±‡∏ô Query
    const query = `UPDATE bookings SET ${fields.join(', ')} WHERE id = ?`;
    params.push(id);

    const [res] = await db.query(query, params);
    return res.affectedRows;
}

// -----------------------------------------------------------------
// 12. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// -----------------------------------------------------------------
async function isBookingOwner(id, user_id) {
    const [rows] = await db.query(
        'SELECT id FROM bookings WHERE id = ? AND user_id = ? LIMIT 1',
        [id, user_id]
    );
    return rows.length > 0;
}


// -----------------------------------------------------------------
// EXPORT MODULE
// -----------------------------------------------------------------
module.exports = {
    hasOverlap,
    createBooking,
    getBookingsByUser,
    getAllBookings,
    getExistingBookingsByRoomAndDate,
    updateBookingStatus,
    deleteBooking,
    getBookingById,
    updateBookingStatusAuto,
    canCancelBooking,
    determineInitialStatus,
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    updateBookingDetails,
    isBookingOwner
};