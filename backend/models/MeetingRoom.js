const db = require('../config/db');

/**
 * Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (Rooms) ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
 */

// 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function getAllMeetingRooms() {
    // üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'rooms'
    const [rows] = await db.query('SELECT * FROM rooms ORDER BY id');
    return rows;
}

// 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ï‡∏≤‡∏° ID
async function getMeetingRoomById(id) {
    // üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'rooms'
    const [rows] = await db.query('SELECT * FROM rooms WHERE id = ?', [id]);
    return rows[0];
}

// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà
async function createMeetingRoom({ name, floor, capacity, hasProjector, isAvailable }) {
    const [res] = await db.query(
        // üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'rooms'
        'INSERT INTO rooms (name, floor, capacity, has_projector, is_available) VALUES (?, ?, ?, ?, ?)',
        [name, floor, capacity, hasProjector, isAvailable]
    );
    return res.insertId;
}

// 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡∏û‡∏£‡πâ‡∏≠‡∏° Whitelist ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL Injection)
async function updateMeetingRoom(id, fields) {
    const keys = Object.keys(fields);
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Whitelist ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const ALLOWED_FIELDS = ['name', 'floor', 'capacity', 'has_projector', 'is_available'];
    
    const filteredKeys = keys.filter(key => ALLOWED_FIELDS.includes(key));
    const filteredValues = filteredKeys.map(key => fields[key]);

    if (filteredKeys.length === 0) return;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô SET ‡∏Ç‡∏≠‡∏á SQL Query
    const setStr = filteredKeys.map(k => `${k} = ?`).join(', ');
    
    // üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'rooms'
    await db.query(`UPDATE rooms SET ${setStr} WHERE id = ?`, [...filteredValues, id]);
}

// 5. ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
async function deleteMeetingRoom(id) {
    // üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'rooms'
    await db.query('DELETE FROM rooms WHERE id = ?', [id]);
}


module.exports = { 
    getAllMeetingRooms, 
    getMeetingRoomById, 
    createMeetingRoom, 
    updateMeetingRoom, 
    deleteMeetingRoom 
};