import React, { useEffect, useState, useMemo } from 'react'; 
// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Path: ‡πÉ‡∏ä‡πâ ../../ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á src/api/services/roomService
import { getRooms } from "../api/services/roomService";
// üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° createBooking ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á
import { getExistingBookingsByRoomAndDate, createBooking } from '../api/services/bookingService'; 
// üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° CheckCircle ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Modal ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
import { Calendar, Clock, MapPin, Loader, CheckCircle, X } from 'lucide-react'; 
import './BookingCalendarPage.css'; 
// üí° ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ AuthContext ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á userId ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
// import { useAuth } from '../../context/AuthContext'; 

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
const TIME_SLOT_INTERVAL = 30; // 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á

const getTimeSlots = (startDate, existingBookings) => {
    const slots = [];
    const dateStr = startDate;
    const startHour = 8;
    const endHour = 18; 

    // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const now = new Date();
    const isToday = startDate === now.toISOString().substring(0, 10);
    
    for (let h = startHour; h < endHour; h++) {
        for (let m = 0; m < 60; m += TIME_SLOT_INTERVAL) {
            const startHours = String(h).padStart(2, '0');
            const startMinutes = String(m).padStart(2, '0');
            
            let startDateTime = new Date(`${dateStr}T${startHours}:${startMinutes}:00`);
            let endDateTime = new Date(startDateTime);
            endDateTime.setMinutes(endDateTime.getMinutes() + TIME_SLOT_INTERVAL);
            
            const endTimeStr = `${String(endDateTime.getHours()).padStart(2, '0')}:${String(endDateTime.getMinutes()).padStart(2, '0')}`;
            const startTimeStr = `${startHours}:${startMinutes}`;
            
            let status = 'available';
            
            // üí° NEW: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (isToday && endDateTime < now) {
                status = 'passed';
            }

            const slotStartMs = startDateTime.getTime();
            const slotEndMs = endDateTime.getTime();

            for (const booking of existingBookings) {
                // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ booking.start_time ‡πÅ‡∏•‡∏∞ booking.end_time ‡πÄ‡∏õ‡πá‡∏ô ISO strings
                const bookingStartMs = new Date(booking.start_time).getTime();
                const bookingEndMs = new Date(booking.end_time).getTime();

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
                const isOverlapping = 
                    (slotStartMs >= bookingStartMs && slotStartMs < bookingEndMs) || 
                    (slotEndMs > bookingStartMs && slotEndMs <= bookingEndMs) ||
                    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≠‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á Slot (‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Slot interval ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
                    (slotStartMs < bookingStartMs && slotEndMs > bookingEndMs);
                
                if (isOverlapping) {
                    const bookingStatus = booking.status?.toLowerCase() ?? 'pending'; 

                    if (bookingStatus === 'confirmed' || bookingStatus === 'pending' || bookingStatus === 'booked' || bookingStatus === 'in_use') {
                        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
                        status = bookingStatus === 'confirmed' || bookingStatus === 'booked' || bookingStatus === 'in_use' ? 'confirmed' : 'pending';
                        break;
                    }
                }
            }
            
            slots.push({
                startTime: startTimeStr,
                endTime: endTimeStr,
                startISO: startDateTime.toISOString(),
                endISO: endDateTime.toISOString(),
                label: `${startTimeStr} - ${endTimeStr}`,
                status: status
            });
        }
    }
    return slots;
};

const BookingModal = ({ isOpen, onClose, slot, room, onConfirm, bookingTitle, setBookingTitle, isLoading }) => {
    if (!isOpen || !slot || !room) return null;

    const formatTime = (isoString) => {
        const date = new Date(isoString);
        return date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
    }

    const formatDate = (isoString) => {
        const date = new Date(isoString);
        return date.toLocaleDateString('th-TH', { day: 'numeric', month: 'long', year: 'numeric' });
    }

    return (
        <div className="booking-modal-overlay">
            <div className="booking-modal card">
                <button onClick={onClose} className="modal-close-btn"><X size={20} /></button>
                <h2 className="modal-header">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°</h2>
                
                <div className="modal-details">
                    <p><MapPin size={16} className="icon-detail" /> <strong>‡∏´‡πâ‡∏≠‡∏á:</strong> {room.name}</p>
                    <p><Calendar size={16} className="icon-detail" /> <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {formatDate(slot.startISO)}</p>
                    <p><Clock size={16} className="icon-detail" /> <strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> {formatTime(slot.startISO)} - {formatTime(slot.endISO)}</p>
                </div>

                {/* <div className="control-group modal-title-input">
                    <label htmlFor="booking-title">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠/‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô):</label>
                    <input
                        id="booking-title"
                        type="text"
                        value={bookingTitle}
                        onChange={e => setBookingTitle(e.target.value)}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå A, ‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô"
                        className="text-input"
                    />
                </div>
 */}
                {/* <div className="modal-actions">
                    <button 
                        onClick={onConfirm} 
                        disabled={!bookingTitle.trim() || isLoading}
                        className="btn-primary"
                    >
                        {isLoading ? (
                            <>
                                <Loader size={16} className="icon-spin" /> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...
                            </>
                        ) : (
                            '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
                        )}
                    </button>
                    <button onClick={onClose} className="btn-secondary" disabled={isLoading}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
                {!bookingTitle.trim() && <p className="error-message">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</p>} */}
            </div>
        </div>
    );
};

export default function BookingCalendarPage() {
    // üí° ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ user object ‡πÄ‡∏ä‡πà‡∏ô { id: 'user-id-123' }
    // const { user } = useAuth();
    const mockUserId = 'user-mock-123'; // üéØ ‡πÉ‡∏ä‡πâ ID ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ Auth Context

    const [allRooms, setAllRooms] = useState([]);
    const [selectedRoomId, setSelectedRoomId] = useState('');
    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().substring(0, 10)); // YYYY-MM-DD
    const [existingBookings, setExistingBookings] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');

    // --- NEW BOOKING STATES ---
    const [selectedSlot, setSelectedSlot] = useState(null);
    const [bookingTitle, setBookingTitle] = useState('');
    const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);
    const [isBookingLoading, setIsBookingLoading] = useState(false);
    const [successMessage, setSuccessMessage] = useState('');
    const [errorMessage, setErrorMessage] = useState('');

    // 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    useEffect(() => {
        getRooms()
            .then(r => {
                const fetchedRooms = Array.isArray(r.data) ? r.data : [];
                setAllRooms(fetchedRooms);
                
                if (fetchedRooms.length > 0) {
                    setSelectedRoomId(fetchedRooms[0].id); 
                }
            })
            .catch(err => {
                console.error("Failed to fetch rooms:", err);
                setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏î‡πâ (API Error)');
            })
            .finally(() => setIsLoading(false));
    }, []);

    // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    useEffect(() => {
        if (!selectedRoomId || !selectedDate) return; 
        
        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        setSuccessMessage('');
        setErrorMessage('');
        
        getExistingBookingsByRoomAndDate({ room_id: selectedRoomId, date: selectedDate })
            .then(r => setExistingBookings(Array.isArray(r.data) ? r.data : []))
            .catch(err => console.error("Failed to fetch existing bookings:", err));
    }, [selectedRoomId, selectedDate]);

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Time Slots
    const timeSlots = useMemo(() => {
        return getTimeSlots(selectedDate, existingBookings);
    }, [selectedDate, existingBookings]);
    
    const currentRoom = allRooms.find(r => r.id === selectedRoomId);

    // --- NEW: HANDLE SLOT SELECTION ---
    const handleSlotClick = (slot) => {
        if (slot.status === 'available') {
            setSelectedSlot(slot);
            setBookingTitle(''); 
            setSuccessMessage('');
            setErrorMessage('');
            setIsBookingModalOpen(true);
        } else {
            setErrorMessage(`‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${slot.label}  ${slot.status.toUpperCase()}`);
        }
    };
    
    // --- NEW: HANDLE CONFIRM BOOKING ---
    const handleConfirmBooking = async () => {
        if (!mockUserId) { // user?.id
            setErrorMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
            return;
        }
        if (!bookingTitle.trim()) {
            setErrorMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
            return;
        }

        setIsBookingLoading(true);
        setErrorMessage('');

        const bookingData = {
            user_id: mockUserId, 
            room_id: selectedRoomId,
            start_time: selectedSlot.startISO,
            end_time: selectedSlot.endISO,
            title: bookingTitle.trim(),
        };

        try {
            const response = await createBooking(bookingData);
            setSuccessMessage(response.message || '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô');
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            const refreshResponse = await getExistingBookingsByRoomAndDate({ room_id: selectedRoomId, date: selectedDate });
            setExistingBookings(Array.isArray(refreshResponse.data) ? refreshResponse.data : []);

            setIsBookingModalOpen(false);
            setSelectedSlot(null);
            setBookingTitle('');
        } catch (err) {
            console.error("Booking failed:", err);
            setErrorMessage(err.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ' + (err.message || 'Server error'));
        } finally {
            setIsBookingLoading(false);
        }
    };

    // --- RENDER STATES ---
    if (isLoading) return <div className="loader-container"><Loader size={24} className="icon-spin" /> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
    if (error) return <div className="error-message page-error">{error}</div>;
    if (allRooms.length === 0) return <div className="empty-state">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ</div>;

    // --- MAIN RENDER ---
    return (
        <div className="calendar-page-container">
            <h1 className="page-header"><Calendar size={28} /> ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°</h1>
            
            <div className="controls-section card">
                <div className="control-group">
                    <label><MapPin size={16} /> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:</label>
                    <select 
                        value={selectedRoomId} 
                        onChange={e => setSelectedRoomId(e.target.value)}
                        className="room-select"
                    >
                        {allRooms.map(r => (
                            <option key={r.id} value={r.id}>
                                {r.name} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏: {r.capacity})
                            </option>
                        ))}
                    </select>
                </div>

                <div className="control-group">
                    <label><Calendar size={16} /> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
                    <input 
                        type="date" 
                        value={selectedDate} 
                        onChange={e => setSelectedDate(e.target.value)} 
                        className="date-input"
                        min={new Date().toISOString().substring(0, 10)}
                    />
                </div>
                
                {currentRoom && (
                    <p className="room-info">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {currentRoom.location} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ {currentRoom.capacity} ‡∏ó‡πà‡∏≤‡∏ô</p>
                )}
            </div>
            
            {/* Success/Error Messages */}
            {successMessage && (
                <div className="alert success-alert">
                    <CheckCircle size={20} /> {successMessage}
                    <button className="alert-close" onClick={() => setSuccessMessage('')}><X size={16} /></button>
                </div>
            )}
            {errorMessage && (
                <div className="alert error-alert">
                    <X size={20} /> {errorMessage}
                    <button className="alert-close" onClick={() => setErrorMessage('')}><X size={16} /></button>
                </div>
            )}


            <div className="availability-section card">
                <h3>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á ({currentRoom?.name || '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'})</h3>
                
                {/* Status Legend */}
                <div className="status-legend">
                    <div className="legend-item"><span className="legend-color available"></span> ‡∏ß‡πà‡∏≤‡∏á </div>
                    <div className="legend-item"><span className="legend-color status-confirmed"></span> ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß</div>    
                    <div className="legend-item"><span className="legend-color status-past"></span> ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß</div>            
                </div>

                <div className="availability-grid">
                    {timeSlots.map((slot, index) => (
                        <div 
                            key={index} 
                            onClick={() => handleSlotClick(slot)}
                            className={`time-slot status-${slot.status}`}
                        >
                            <Clock size={12} className="time-icon" /> {slot.label}
                        </div>
                    ))}
                </div>
            </div>
            
            {/* Booking Confirmation Modal */}
            <BookingModal
                isOpen={isBookingModalOpen}
                onClose={() => setIsBookingModalOpen(false)}
                slot={selectedSlot}
                room={currentRoom}
                onConfirm={handleConfirmBooking}
                bookingTitle={bookingTitle}
                setBookingTitle={setBookingTitle}
                isLoading={isBookingLoading}
            />
        </div>
    );
}
