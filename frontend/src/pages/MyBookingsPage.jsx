// D:\MeetingRoomBooking\frontend\src\pages\MyBookingsPage.jsx

import React, { useEffect, useState } from 'react';
import { getMyBookings, deleteBooking } from '../api/services/bookingService'; 
import { Calendar, Trash2, MapPin, Clock } from 'lucide-react'; 
import './MyBookingsPage.css';

// ------------------------------------------------------------------
// ‚≠ê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Class ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Backend)
// ------------------------------------------------------------------
const getStatusInfo = (status) => {
    const lowerStatus = status?.toLowerCase();
    switch (lowerStatus) {
        case 'booked': // ‚≠ê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÅ‡∏ó‡∏ô 'confirmed' ‡∏´‡∏£‡∏∑‡∏≠ 'pending')
            return { tagClass: 'status-booked', text: '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' };
        case 'in_use': // ‚≠ê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            return { tagClass: 'status-inuse', text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' };
        case 'completed': // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            return { tagClass: 'status-completed', text: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' };
        case 'cancelled': // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö)
            return { tagClass: 'status-cancelled', text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß' };
        // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô REJECTED ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        default:
            // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á 'Unknown' ‡πÄ‡∏î‡∏¥‡∏°
            return { tagClass: 'status-unknown', text: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }; 
    }
};

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
const formatBookingTimes = (startIso, endIso) => {
    if (!startIso || !endIso) return { date: 'N/A', startTime: 'N/A', endTime: 'N/A' };
    try {
        const startDate = new Date(startIso);
        const endDate = new Date(endIso);
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (DD/MM/YYYY)
        const dateStr = startDate.toLocaleDateString('th-TH', { day: '2-digit', month: '2-digit', year: 'numeric' });
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (HH:MM)
        const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
        const startTimeStr = startDate.toLocaleTimeString('th-TH', timeOptions);
        const endTimeStr = endDate.toLocaleTimeString('th-TH', timeOptions);

        return { 
            date: dateStr, 
            startTime: startTimeStr, 
            endTime: endTimeStr 
        };
    } catch (e) {
        return { date: 'Invalid Date', startTime: 'N/A', endTime: 'N/A' };
    }
};


export default function MyBookingsPage() {
    const [bookings, setBookings] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    const fetchBookings = () => {
        setIsLoading(true);
        setError(null);
        getMyBookings()
            .then(res => {
                setBookings(Array.isArray(res.data) ? res.data : []);
            })
            .catch(err => {
                console.error("Failed to load user bookings:", err);
                // üö® ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏à‡∏≤‡∏Å Server ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                const errorMessage = err?.response?.data?.message || `Failed to load your bookings.`;
                setError(errorMessage);
            })
            .finally(() => setIsLoading(false));
    };

    useEffect(() => {
        fetchBookings();
    }, []);

    const handleDelete = (id, currentStatusText) => {
        const currentStatus = currentStatusText.toLowerCase();

        // ‚≠ê ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' (BOOKED)
        // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Backend ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ canCancelBooking(booking) ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
        if (currentStatus !== '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß') { 
            alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${currentStatus} ‡πÑ‡∏î‡πâ`);
            return;
        }

        if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ')) {
            deleteBooking(id)
                .then(() => {
                    alert('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    fetchBookings(); // Reload bookings list
                })
                .catch(err => {
                    console.error(err);
                    // üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏à‡∏≤‡∏Å Server ‡πÄ‡∏ä‡πà‡∏ô "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß"
                    const errorMessage = err?.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ (Server Error)';
                    alert(errorMessage);
                });
        }
    };
    
    return (
        <div className="my-bookings-container">
            <h1 className="page-header"><Calendar size={28} /> My Bookings</h1>

            {isLoading && <p className="loading-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...</p>}
            {error && <div className="error-message">{error}</div>}

            {!isLoading && bookings.length === 0 && <p className="empty-state">‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</p>}

            {!isLoading && bookings.length > 0 && (
                <div className="table-wrapper">
                    <table className="bookings-table">
                        <thead>
                            <tr>
                                <th>Room Name</th>
                                <th>Date</th>
                                <th>Time</th>
                                {/* <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th> */}
                                <th className="action-header">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {bookings.map(b => {
                                // üéØ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getStatusInfo ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
                                const times = formatBookingTimes(b.start_time, b.end_time);
                                const statusInfo = getStatusInfo(b.status);
                                
                                // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' (BOOKED)
                                const isCancellable = statusInfo.text === '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß';

                                return (
                                    <tr 
                                        key={b.id} 
                                        className={`booking-row ${statusInfo.tagClass}`}
                                    >
                                        
                                        <td><MapPin size={16} className="icon-inline" /> {b.room_name || 'N/A'}</td>
                                        
                                        {/* üéØ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
                                        <td><Calendar size={16} className="icon-inline" /> {times.date}</td>
                                        
                                        {/* üéØ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ */}
                                        <td><Clock size={16} className="icon-inline" /> {times.startTime} - {times.endTime}</td>
                                        
                                        {/* <td className="status-cell">
                                            <span className={`status-tag ${statusInfo.tagClass}`}>
                                                {statusInfo.text}
                                            </span>
                                        </td> */}
                                        
                                        <td className="action-cell">
                                            {isCancellable ? ( 
                                                <button
                                                    // ‡∏™‡πà‡∏á statusInfo.text ('‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß') ‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Alert
                                                    onClick={() => handleDelete(b.id, statusInfo.text)} 
                                                    className="btn-cancel-booking"
                                                >
                                                    <Trash2 size={16} /> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                                </button>
                                            ) : (
                                                <span className="text-muted">{statusInfo.text}</span>
                                            )}
                                        </td>
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
}