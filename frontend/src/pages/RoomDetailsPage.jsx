import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getRoom } from '../api/roomService';
import { createBooking } from '../api/services/bookingService';
import { useAuth } from '../context/AuthContext';
import { AlertTriangle, MapPin, Users, Info, Calendar as CalendarIcon, Clock as ClockIcon } from 'lucide-react'; 
import './RoomDetails.css'; 

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô SQL Timestamp (YYYY-MM-DD HH:mm:ss)
const formatDateForSQL = (date) => {
    if (!(date instanceof Date) || isNaN(date)) return null;

    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å Date ‡πÅ‡∏•‡∏∞ Time ‡∏à‡∏≤‡∏Å Date Object
const extractDateTime = (dateObj) => {
    if (!(dateObj instanceof Date) || isNaN(dateObj)) return { date: '', time: '' };
    const date = dateObj.toISOString().substring(0, 10); // YYYY-MM-DD
    const time = dateObj.toTimeString().substring(0, 5); // HH:MM
    return { date, time };
};

const MAX_BOOKING_DURATION_MS = 3 * 60 * 60 * 1000;

export default function RoomDetailsPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const { isAuthenticated } = useAuth();
    
    const [room, setRoom] = useState(null);
    // üéØ NEW STATE: ‡πÅ‡∏¢‡∏Å Date, Start Time, End Time
    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().substring(0, 10)); 
    const [timeStart, setTimeStart] = useState('');
    const [timeEnd, setTimeEnd] = useState('');
    
    const [error, setError] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
    useEffect(() => {
        getRoom(id).then(r => setRoom(r.data)).catch(console.error);
    }, [id]);

    // 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤)
    useEffect(() => {
        const now = new Date();
        const future = new Date(now.getTime() + 60 * 60 * 1000); 

        const startInfo = extractDateTime(now);
        const endInfo = extractDateTime(future);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        setSelectedDate(startInfo.date);
        setTimeStart(startInfo.time);
        setTimeEnd(endInfo.time);
    }, []);

    // üéØ Helper: ‡∏£‡∏ß‡∏° Date ‡πÅ‡∏•‡∏∞ Time ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô SQL Timestamp
    const getFullTimestamp = (date, time) => {
        if (!date || !time) return null;
        // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Date Object ‡πÉ‡∏ô Timezone ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Local Time)
        return new Date(`${date}T${time}:00`); 
    };


    // 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á (Frontend Validation)
    const validateDuration = (startMs, endMs) => {
        const duration = endMs - startMs;

        if (duration <= 0) {
            return "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô";
        }
        if (duration > MAX_BOOKING_DURATION_MS) {
            return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ";
        }
        return null; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    };

    // 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const onBook = async () => {
        setError('');
        
        const fullStart = getFullTimestamp(selectedDate, timeStart);
        const fullEnd = getFullTimestamp(selectedDate, timeEnd);

        if (!isAuthenticated) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
            return navigate('/login');
        }

        if (!fullStart || !fullEnd) {
            return setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        }
        
        // üéØ Validation Logic
        const durationError = validateDuration(fullStart.getTime(), fullEnd.getTime());
        if (durationError) {
            return setError(durationError);
        }
        
        const start_time_sql = formatDateForSQL(fullStart);
        const end_time_sql = formatDateForSQL(fullEnd);

        setIsSubmitting(true);
        try {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Backend
            await createBooking({ 
                room_id: id, 
                start_time: start_time_sql, 
                end_time: end_time_sql,
                // üí° ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Title ‡πÅ‡∏•‡∏∞ user_id/user_name ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á
            });
            
            alert('‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            navigate('/my-bookings'); // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
        } catch (err) {
            console.error(err);
            const message = err?.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á';
            setError(message);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (!room) return <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
    
    // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏ä‡πà‡∏ô R-202) ‡πÅ‡∏•‡∏∞ Subtitle (‡πÄ‡∏ä‡πà‡∏ô (Main Conference))
    const roomNameParts = room.name.match(/^(.*?)\s*\((.*)\)$/);
    const roomCode = roomNameParts ? roomNameParts[1] : room.name;
    const roomSubtitle = roomNameParts ? roomNameParts[2] : room.description;

    return (
        <div className="room-detail-container">
            <h2 className="page-header">
                <span className="room-code">{roomCode}</span> 
                {roomSubtitle && <span className="room-subtitle">({roomSubtitle})</span>}
            </h2>

            <div className="room-meta">
                <p><MapPin className="icon-small" /> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {room.location}</p>
                <p><Users className="icon-small" /> ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏: {room.capacity} ‡∏ó‡πà‡∏≤‡∏ô</p>
                <p><Info className="icon-small" /> ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {room.description}</p>
                <p>‚öôÔ∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {room.equipment || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
            </div>

            <div className="booking-form-card">
                <h3>‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°</h3>
                
                {error && (
                    <div className="error-message"><AlertTriangle className="icon-error" /> {error}</div>
                )}
                
                {/* üéØ NEW LAYOUT: Group Date and Time */}
                <div className="form-datetime-group">
                    {/* 1. DATE INPUT */}
                    <div className="form-group">
                        <label><CalendarIcon size={16} className="icon-tiny" /> ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á</label>
                        <input 
                            type="date" 
                            value={selectedDate} 
                            onChange={e => setSelectedDate(e.target.value)} 
                            className="form-input"
                            disabled={isSubmitting}
                            min={new Date().toISOString().substring(0, 10)} // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
                        />
                    </div>
                </div>

                <div className="form-datetime-group">
                    {/* 2. START TIME INPUT */}
                    <div className="form-group">
                        <label><ClockIcon size={16} className="icon-tiny" /> ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
                        <input 
                            type="time" 
                            value={timeStart} 
                            onChange={e => setTimeStart(e.target.value)} 
                            className="form-input"
                            disabled={isSubmitting}
                            step="1800" // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
                        />
                    </div>
                    
                    {/* 3. END TIME INPUT */}
                    <div className="form-group">
                        <label><ClockIcon size={16} className="icon-tiny" /> ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                        <input 
                            type="time" 
                            value={timeEnd} 
                            onChange={e => setTimeEnd(e.target.value)} 
                            className="form-input"
                            disabled={isSubmitting}
                            step="1800" // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
                        />
                    </div>
                </div>
                
                <button 
                    onClick={onBook} 
                    className="btn-primary"
                    disabled={isSubmitting || !timeStart || !timeEnd}
                >
                    {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'}
                </button>
                
                <p className="note-duration">
                    * ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á.
                </p>
            </div>
        </div>
    );
}